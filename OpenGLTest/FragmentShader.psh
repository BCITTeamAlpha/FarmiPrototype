#version 330 core

in vec2 v_texCoord;
in vec3 v_position;
in vec3 v_normal;

out vec4 o_fragColor;

uniform vec4 u_color;
uniform sampler2D u_textureSampler;
uniform vec3 lightPosition;
uniform float u_attenuationCoefficient = 0.1f;
uniform bool u_fullBright;

void main() {
	vec4 color = u_color;

	if (textureSize(u_textureSampler, 0).x > 1) { // check if texture is bound
		color *= texture(u_textureSampler, v_texCoord);
	}

	if (!u_fullBright) {
		vec3 N = normalize(v_normal);
		vec3 L = lightPosition - v_position;
		float len = length(L);
		L /= len;

		float lambert = max(dot(N, L), 0.0f);
		float attenuation = 1.0f / (len * u_attenuationCoefficient);
		attenuation *= attenuation;

		color.xyz *= lambert * attenuation;
	}
	
	o_fragColor = color;
}