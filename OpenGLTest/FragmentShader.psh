#version 330 core

in vec4 v_color;
in vec2 v_texCoord;
in vec3 v_position;
in vec3 v_normal;

out vec4 o_fragColor;

uniform vec3 lightPosition;
uniform float attenuationCoefficient = 0.1f;

vec3 markusToneMap(vec3 c) {
	c.y += 0.25 * max(c.x - 1.0f, 0.0f) + 0.25 * max(c.z - 1.0f, 0.0f);
	c.x += 0.125 * max(c.y - 1.0f, 0.0f);
	c.z += 0.125 * max(c.y - 1.0f, 0.0f);
	return clamp(c, 0.0f, 1.0f);
}

#define TileScale 10.0

float proceduralTile(vec2 uv, float light, float dark) {
	float U = floor(uv.x * TileScale);
	float V = floor(uv.y * TileScale);
	return max(dark, light * mod((U + V), 2.0));
}



void main() {
	vec3 N = normalize(v_normal);
	vec3 L = lightPosition - v_position;

	float lambert = max(dot(N, normalize(L)), 0.0f);
	float attenuation = 1.0f / length(L * attenuationCoefficient);
	attenuation *= attenuation;

	o_fragColor = vec4(v_color.xyz * lambert * attenuation * proceduralTile(v_texCoord, 1.0, 0.5), v_color.w);
}